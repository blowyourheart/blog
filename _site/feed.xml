<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>贪嗔痴的技术博客</title>
    <description>分享开发遇到的问题以及经验总结
</description>
    <link>http://overfit.net/</link>
    <atom:link href="http://overfit.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 11 Jan 2016 11:05:41 +0800</pubDate>
    <lastBuildDate>Mon, 11 Jan 2016 11:05:41 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>jdk Integer实现</title>
        <description>&lt;h2 id=&quot;tostring-&quot;&gt;toString 使用负数模和除法来进行进制转换&lt;/h2&gt;
&lt;p&gt;不知道用负数进行除和模运算是不是比正数要效率高
一些与二进制相关的方法大量使用了位运算，比如计算二进制1的个数，高位0的个数，低位0的个数, 最高位为1的数值，最低位为1的数值, 按照二进制表示来反转，按照字节数组表示形式的反转。
里面也有一个IntegerCache, 默认缓存[-128, 127]以内的数。如果要使用缓存后的结果，必须使用valueOf()方法。&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 20:08:41 +0800</pubDate>
        <link>http://overfit.net/jdk/integer/2015/12/21/jdk-interger.html</link>
        <guid isPermaLink="true">http://overfit.net/jdk/integer/2015/12/21/jdk-interger.html</guid>
        
        
        <category>jdk</category>
        
        <category>Integer</category>
        
      </item>
    
      <item>
        <title>编程中的奇葩bug</title>
        <description>&lt;p&gt;经常编码会发现有些bug很奇葩，刚开始找到的时候会叹息原来如此，课时等过了一段时间又会犯同样的毛病，这次找的快一些了，再次记录下来。&lt;/p&gt;

&lt;h2 id=&quot;mysqlcommit&quot;&gt;mysql事务最后忘记commit&lt;/h2&gt;
&lt;p&gt;程序逻辑再一个事物里面，代码写的好好的，看了N遍，也换了很多种测试参数，但就是不起作用。单步调试以后才发现，原来最后没有commit。
这个只是针对修改数据库时的问题，通常都是先拷贝数据库事物的模板，然后在上面改动，这时候很容易把提交事物的代码干掉了，就会出现这种情况。&lt;/p&gt;

&lt;h2 id=&quot;xmemcahced&quot;&gt;Xmemcahced客户端读取一直抛异常&lt;/h2&gt;
&lt;p&gt;通常伴随着大量的读超时。XmemcachedClient默认是只有一个TCP链接的，如果某次发送了一个非常大的批量查询请求，则有可能使得当前的链路broken掉。
memcached服务依然是没有问题的，这个时候必须重启服务才可以让链路读写恢复正常。对于memcache要避免发送大批量查询的请求，这一般是由于内部系统一些批量查询操作造成的。
给后台系统用的服务最好还是和线上隔离，因为后台系统在性能上的考虑会粗一些。&lt;/p&gt;

&lt;h2 id=&quot;thriftbuffersize&quot;&gt;thrift读bufferSize使用默认值&lt;/h2&gt;
&lt;p&gt;对于默认设置的thrift server, 如果用echo “ffffffff” | nc thriftHost thriftPort
则thrift服务会挂掉，具体解释如下:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every time RpcServer {@link org.apache.thrift.server.AbstractNonblockingServer} process a request, it will try to allocate a buffer whose size is declared by the very first integer of socket buffer unless the buffer size is large than {@link org.apache.thrift.server.AbstractNonblockingServer#MAX_READ_BUFFER_BYTES}.  Large maxReadBufferBytes makes it easily to throw OOM when request is illegal, while too small value leads to an invalid RpcServer.  Set maxReadBufferBytes to a safe value to make RpcServer more robust with illegal request especially when you are not using rpc to do large data transmission.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单说来，就是thrift server将一个请求的前4个字节的值作为这次请求要占用的内存大小来看待，而默认最大大小是一个long可以表示的最大值, 所以很容易把内存搞出OOM。
必须再初始化的时候填入一个默认最大值，比如100MB。&lt;/p&gt;

&lt;h2 id=&quot;wapurl&quot;&gt;支付宝wap支付页面跳转同步通知页面路径url不能设置超过一个的请求参数&lt;/h2&gt;
&lt;p&gt;老版本wap支付这个参数叫做 call_back_url，新版本叫做 return_url。
这个url是一个GET请求，但是请求参数不能超过一个，否则支付宝会报错, 出错情况如下:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;res_error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/code&amp;gt;
        &amp;lt;sub_code&amp;gt;0000&amp;lt;/su&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/msg&amp;gt;
        &amp;lt;detail&amp;gt;系统异常&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/err&amp;gt;&amp;amp;sec_id=MD5&amp;amp;service=alipay.wap.trade.create.direct&amp;amp;v=2.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;所以对于含有多个请求参数的call_back_url, 只能将参数放在路径里面。&lt;/p&gt;

&lt;h2 id=&quot;rest302&quot;&gt;rest接口返回302被安卓系统劫持&lt;/h2&gt;
&lt;p&gt;如果一个rest接口返回的是302重定向请求，会有诸多不方便。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于android或者iOS上的app来说，如果返回结果是302，且地址不是https, 系统会自动去请求302的url，这样有的依赖于状态码的功能就被系统劫持了。&lt;/li&gt;
  &lt;li&gt;对于web来说，发送ajax请求，如果返回的结果是302，他也会继续获取返回的url指向的结果。&lt;/li&gt;
  &lt;li&gt;运营商会对404, 301, 302等结果进行潜在的劫持，使得状态吗返回的是200等页面。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以对于rest服务来说，就应该杜绝302接口。如果一个接口被设计成返回302， 那一定不是用作rest服务。&lt;/p&gt;

&lt;h2 id=&quot;arraysaslist-&quot;&gt;Arrays.asList(…) 返回的是个常量列表&lt;/h2&gt;
&lt;p&gt;如果有谁打算将这个函数返回的列表进行添加或者删除操作，那么就会得到意想不到的异常，而且很死的很难看。&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Dec 2015 20:08:41 +0800</pubDate>
        <link>http://overfit.net/bug/fix/2015/12/15/fix-bug.html</link>
        <guid isPermaLink="true">http://overfit.net/bug/fix/2015/12/15/fix-bug.html</guid>
        
        
        <category>bug</category>
        
        <category>fix</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 08 Dec 2015 15:57:41 +0800</pubDate>
        <link>http://overfit.net/jekyll/update/2015/12/08/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://overfit.net/jekyll/update/2015/12/08/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>巧用nc管理memcached缓存</title>
        <description>&lt;p&gt;memcached作为成熟的缓存系统，被各大互联网公司广泛使用。memcached作为一个分布式的缓存系统，缓存的分片是通过客户端来做的。所以，如果要改动数据，就需要去每一个memcached实例上执行一遍这样的改动，才能确保最终改动了数据。&lt;/p&gt;

&lt;p&gt;memcached提供了文本协议和二进制协议来操作缓存，利用文本协议我们可以方便的修改数据，举例如下：
缓存里有一堆实体 entity:1 entity:3 …，现在根据运营或者数据的需要，需要更新某些实体。反映在memcached上就是把缓存的实体直接删除掉就可以了。假定文件
entityIds.txt存放了要删除的实体id，每行一个。可以使用脚本来生成要删除的命令，保存到cmd.txt文件中&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat ./entityIds.txt | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;LINE
    &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;delete entity:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LINE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;假定现在有两个memcached实例，部署在 cache1, cache2两台机器上，端口号都是 11211，我们只需要执行一个简单的脚本就可以达到想要的目的。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11211&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;txt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11211&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其实nc的功能还是很强大的，比如很多公司的线上环境都有跳板机来保障登录的安全性，传文件就必须先经过跳板机传输再传到对应的机器上，或者公司的op会提供一个传输文件的工具，如果线上机器的某些端口可以直接和开发机器连接，就可以用nc来传输文件了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nc  -l 10000 &amp;gt; file.txt  &lt;span class=&quot;c&quot;&gt;#线上机器监听本机10000端口并把收到的内容存到本地file.txt文件。&lt;/span&gt;
nc online-server1 10000 &amp;lt; send_file.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;传输完了以后用 md5sum 命令检查下是否是一样的就可以了。 和同事之间传输文件也可以使用这种方式方便的传输，尤其是在没有qq的时候这样最方便了，比scp, sftp命令还要快。&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Dec 2015 15:57:41 +0800</pubDate>
        <link>http://overfit.net/memcached/nc/2015/12/06/nc-clean-memcached.html</link>
        <guid isPermaLink="true">http://overfit.net/memcached/nc/2015/12/06/nc-clean-memcached.html</guid>
        
        
        <category>memcached</category>
        
        <category>nc</category>
        
      </item>
    
      <item>
        <title>登录服务加解密</title>
        <description>&lt;p&gt;现在的登录服务一般会将用户的密码加盐，以避免存储密码的明文，而且即使密文泄露了，也很难知道用户的原始密码是多少，这样也不能冒充用户来登录。&lt;/p&gt;

&lt;p&gt;发送登录请求时会将(用户名,加密密码）发送过来，然后服务端解密拿到明文密码，并根据用户的用户名拿到数据库中存储的slat和混淆后的密码，按照原来的混淆计算以后比较两个字符串是否相等就能判断是否可以登录了。&lt;/p&gt;

&lt;p&gt;这里有一个漏洞，在于如果这个发送登录的请求被监听了，那么监听者也可以冒充这个用户进行登录。要避免被监听登录，就必须在发送加密密钥时只能使用一次，过期作废。可以在发送登录请求时指定一个本次请求的过期时间戳，并把这个时间戳连同原始密码一同加密发送过去，服务端除了判断是否超过过期时间以外，还要判断解密以后的时间戳是否与请求的时间戳一致，防止被篡改。如果服务是通过HTTPS来做的话，就不需要这样做了，HTTPS层完成了加密处理。&lt;/p&gt;

&lt;p&gt;另一个问题是防止暴力破解密码，就是对登录请求，对同一个帐号和IP对，不允许频繁访问，比如1分钟只允许访问10次等。通常登录服务是多个实例存在，如果将登录信息存储在服务的内存里，则达不到精确的全局限制作用。&lt;/p&gt;

&lt;p&gt;可以基于redis做一个简单的防暴力破解实现。对于每一个帐号和IP对，在redis中用有序集合存储每次访问的时间，每次请求时先查询最近一分钟内登录记录的个数，如果超过10个，则不允许访问，并删除一分钟之前的登录记录。如果没有超过（无记录代表没有超过）, 则将当前记录写入到列表中，删除一分钟之前的记录，并设置当前集合为一分钟的过期时间，并继续后面的操作。&lt;/p&gt;

&lt;p&gt;虽然这里会出现同步竞争的情况，但是对于防止暴力破解而言，并不需要很严格的检测性，只需要能防住暴力检测就可以了。&lt;/p&gt;

&lt;h1 id=&quot;oauth-20-&quot;&gt;OAuth 2.0 授权登录&lt;/h1&gt;
&lt;p&gt;现在有很多通过其他网站的帐号来登录自己app的服务，比如QQ号，微信号，微博，人人号登录本app，这里用的都是OAuth2.0 开放授权接口来实现的，该协议的具体流程是相当复杂的，不过大部分公司都提供了SDK来协助快速开发。&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 20:07:41 +0800</pubDate>
        <link>http://overfit.net/2015/11/16/password-login.html</link>
        <guid isPermaLink="true">http://overfit.net/2015/11/16/password-login.html</guid>
        
        
      </item>
    
  </channel>
</rss>
